<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Typespecs on Today I Learned</title>
    <link>https://snamiki1212.github.io/til/tags/typespecs/</link>
    <description>Recent content in Typespecs on Today I Learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Jul 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://snamiki1212.github.io/til/tags/typespecs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>typespecs</title>
      <link>https://snamiki1212.github.io/til/elixir/typespecs/</link>
      <pubDate>Wed, 04 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://snamiki1212.github.io/til/elixir/typespecs/</guid>
      <description>公式ドキュメントや、コード見ていて知った型定義の方法をまとめ
 @type &amp;lt;type name&amp;gt;は型指定で使用する特殊な記法。慣習として、&amp;lt;type name&amp;gt;はtで記載されることが多い。  例) @type t :: :dev | :stg | :pro
 typespecは厳格さを保証してくれない。厳格にさせたい場合はDializerなどを使う必要がある。ただし、実行自体に時間がかかるようなので、プロジェクト規模やメンバ感で相談して導入検討を行うとよいと思う  基本 map typespec  mapとしてtypespec定義 内部に何が入るかは、内部コードのロジックを追わないとわからない  defmodule M1 do @spec sum(map) :: integer def sum(params) do %{a: a, b: b} = params a + b end end  よく使う type attribute Structによるtypespec  type attributeを実装したStructを作成し、そのStructをtypespecで定義 Struct要素の型の責任をStruct3に持たせられる  他の関数でも使い回しが行いやすい   defmodule Struct3 do defstruct a: 999, b: 888 @type t :: %Struct3{a: integer, b: integer} end defmodule M do @spec sum(Struct3.</description>
    </item>
    
  </channel>
</rss>