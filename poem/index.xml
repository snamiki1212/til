<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Poem on Today I Learned</title>
    <link>https://snamiki1212.github.io/til/poem/</link>
    <description>Recent content in Poem on Today I Learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jan 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://snamiki1212.github.io/til/poem/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to study</title>
      <link>https://snamiki1212.github.io/til/poem/how-to-study/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://snamiki1212.github.io/til/poem/how-to-study/</guid>
      <description>エンジニアの能力と今どきの難しさを読んで思ったこと 概要 知識範囲を３つに分類してる  上 ↑ 実行環境：実践的知識 … ｜カテゴリ：概念的知識 下 ↓ ベース　：基礎的知識  上のレイヤは実践的だが、移り変わりが早い（キャッチアップコストが高い）
下のレイヤは教養的な知識だが、移り変わりが遅い
主張  最近は上から入る人が圧倒的に多い 上から下へ降りる  →下の学習をしながら常に上の知識のメンテが必要なのでシンドイ
 下から上へ上がる  →時間はかかるが、腰を据えて進められるので堅実
思ったこと ①下から上へ 体系的に長期的な学習プランを立てるタイプの人には合うと思う。
ただし、
「下の知識が最終的にどのように活かされるのか？」
というビジョンがわかないため下記可能性をはらんでいる
 モチベーション枯渇 実践を意識しない知識 上の階層へと繋がらない自己満的知識  ②上から下へ（パラシュート／遅延評価学習法） 大抵の職務で求められるのは実践的な上のレイヤーだ。
ただし、調査や実装の下のレイヤの知識が必要になるときがある。
なので、必要になったタイミングで学ぶスタイルが効率的である。
ただし、経験上、危惧すべき点として
 体系的に知識の獲得がし辛い 慣れるまで時間がかかる。なぜなら、学生時の勉学において、このような学習方法による経験は少ないので  自分の考えまとめ 自分はエンジニア初期のとき
「下から上へ」
の学習方法のみが正義だと思い、
またこの方法で学習できない状況にあったので、
時間を取って腰を据えて学習できる環境を渇望していたが
「上から下へ」
の学習を続けるに当たっては、
実践的知識と非体系的学習能力の向上を得られた。
重要なのは、どちらから学ぶにしても、
「反対側にすばやく行ってはすばやく戻ってくること」
だと思う。
つまり、
下から上に行く場合
→「最終的にどのように実践されるか」を意識するために少しでいいので早い段階でも上のレイヤの知識を使うべき
上から下に行く場合
→必要に応じて下のレイヤを学習してそれを上のレイヤに繋げて実際に実務で使う
上下のどちらから学習を進めるに当たっても共通して使われる知識獲得方法だと思う。</description>
    </item>
    
  </channel>
</rss>